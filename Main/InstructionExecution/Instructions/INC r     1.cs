// AUTOGENERATED CODE
//
// Do not make changes directly to this (.cs) file.
// Change INC r     .tt instead.

namespace Konamiman.Z80dotNet
{
    public partial class Z80InstructionExecutor
    {
        /// <summary>
        /// The INC A instruction.
        /// </summary>
        private byte INC_A()
        {
            FetchFinished();
            var newValue = MainRegisters.A.Inc();
            MainRegisters.A = newValue;
            MainRegisters.SF = newValue.GetBit(7);
            MainRegisters.ZF = (newValue == 0);
            MainRegisters.HF = ((newValue & 0x0F) == 0);
            MainRegisters.PF = (newValue == 0x80);
            MainRegisters.NF = 0;
			MainRegisters.Flag3 = newValue.GetBit(3);
			MainRegisters.Flag5 = newValue.GetBit(5);
            return 4;
        }

        /// <summary>
        /// The INC B instruction.
        /// </summary>
        private byte INC_B()
        {
            FetchFinished();
            var newValue = MainRegisters.B.Inc();
            MainRegisters.B = newValue;
            MainRegisters.SF = newValue.GetBit(7);
            MainRegisters.ZF = (newValue == 0);
            MainRegisters.HF = ((newValue & 0x0F) == 0);
            MainRegisters.PF = (newValue == 0x80);
            MainRegisters.NF = 0;
			MainRegisters.Flag3 = newValue.GetBit(3);
			MainRegisters.Flag5 = newValue.GetBit(5);
            return 4;
        }

        /// <summary>
        /// The INC C instruction.
        /// </summary>
        private byte INC_C()
        {
            FetchFinished();
            var newValue = MainRegisters.C.Inc();
            MainRegisters.C = newValue;
            MainRegisters.SF = newValue.GetBit(7);
            MainRegisters.ZF = (newValue == 0);
            MainRegisters.HF = ((newValue & 0x0F) == 0);
            MainRegisters.PF = (newValue == 0x80);
            MainRegisters.NF = 0;
			MainRegisters.Flag3 = newValue.GetBit(3);
			MainRegisters.Flag5 = newValue.GetBit(5);
            return 4;
        }

        /// <summary>
        /// The INC D instruction.
        /// </summary>
        private byte INC_D()
        {
            FetchFinished();
            var newValue = MainRegisters.D.Inc();
            MainRegisters.D = newValue;
            MainRegisters.SF = newValue.GetBit(7);
            MainRegisters.ZF = (newValue == 0);
            MainRegisters.HF = ((newValue & 0x0F) == 0);
            MainRegisters.PF = (newValue == 0x80);
            MainRegisters.NF = 0;
			MainRegisters.Flag3 = newValue.GetBit(3);
			MainRegisters.Flag5 = newValue.GetBit(5);
            return 4;
        }

        /// <summary>
        /// The INC E instruction.
        /// </summary>
        private byte INC_E()
        {
            FetchFinished();
            var newValue = MainRegisters.E.Inc();
            MainRegisters.E = newValue;
            MainRegisters.SF = newValue.GetBit(7);
            MainRegisters.ZF = (newValue == 0);
            MainRegisters.HF = ((newValue & 0x0F) == 0);
            MainRegisters.PF = (newValue == 0x80);
            MainRegisters.NF = 0;
			MainRegisters.Flag3 = newValue.GetBit(3);
			MainRegisters.Flag5 = newValue.GetBit(5);
            return 4;
        }

        /// <summary>
        /// The INC H instruction.
        /// </summary>
        private byte INC_H()
        {
            FetchFinished();
            var newValue = MainRegisters.H.Inc();
            MainRegisters.H = newValue;
            MainRegisters.SF = newValue.GetBit(7);
            MainRegisters.ZF = (newValue == 0);
            MainRegisters.HF = ((newValue & 0x0F) == 0);
            MainRegisters.PF = (newValue == 0x80);
            MainRegisters.NF = 0;
			MainRegisters.Flag3 = newValue.GetBit(3);
			MainRegisters.Flag5 = newValue.GetBit(5);
            return 4;
        }

        /// <summary>
        /// The INC L instruction.
        /// </summary>
        private byte INC_L()
        {
            FetchFinished();
            var newValue = MainRegisters.L.Inc();
            MainRegisters.L = newValue;
            MainRegisters.SF = newValue.GetBit(7);
            MainRegisters.ZF = (newValue == 0);
            MainRegisters.HF = ((newValue & 0x0F) == 0);
            MainRegisters.PF = (newValue == 0x80);
            MainRegisters.NF = 0;
			MainRegisters.Flag3 = newValue.GetBit(3);
			MainRegisters.Flag5 = newValue.GetBit(5);
            return 4;
        }

        /// <summary>
        /// The INC IXH instruction.
        /// </summary>
        private byte INC_IXH()
        {
            FetchFinished();
            var newValue = Registers.IXH.Inc();
            Registers.IXH = newValue;
            MainRegisters.SF = newValue.GetBit(7);
            MainRegisters.ZF = (newValue == 0);
            MainRegisters.HF = ((newValue & 0x0F) == 0);
            MainRegisters.PF = (newValue == 0x80);
            MainRegisters.NF = 0;
			MainRegisters.Flag3 = newValue.GetBit(3);
			MainRegisters.Flag5 = newValue.GetBit(5);
            return 8;
        }

        /// <summary>
        /// The INC IXL instruction.
        /// </summary>
        private byte INC_IXL()
        {
            FetchFinished();
            var newValue = Registers.IXL.Inc();
            Registers.IXL = newValue;
            MainRegisters.SF = newValue.GetBit(7);
            MainRegisters.ZF = (newValue == 0);
            MainRegisters.HF = ((newValue & 0x0F) == 0);
            MainRegisters.PF = (newValue == 0x80);
            MainRegisters.NF = 0;
			MainRegisters.Flag3 = newValue.GetBit(3);
			MainRegisters.Flag5 = newValue.GetBit(5);
            return 8;
        }

        /// <summary>
        /// The INC IYH instruction.
        /// </summary>
        private byte INC_IYH()
        {
            FetchFinished();
            var newValue = Registers.IYH.Inc();
            Registers.IYH = newValue;
            MainRegisters.SF = newValue.GetBit(7);
            MainRegisters.ZF = (newValue == 0);
            MainRegisters.HF = ((newValue & 0x0F) == 0);
            MainRegisters.PF = (newValue == 0x80);
            MainRegisters.NF = 0;
			MainRegisters.Flag3 = newValue.GetBit(3);
			MainRegisters.Flag5 = newValue.GetBit(5);
            return 8;
        }

        /// <summary>
        /// The INC IYL instruction.
        /// </summary>
        private byte INC_IYL()
        {
            FetchFinished();
            var newValue = Registers.IYL.Inc();
            Registers.IYL = newValue;
            MainRegisters.SF = newValue.GetBit(7);
            MainRegisters.ZF = (newValue == 0);
            MainRegisters.HF = ((newValue & 0x0F) == 0);
            MainRegisters.PF = (newValue == 0x80);
            MainRegisters.NF = 0;
			MainRegisters.Flag3 = newValue.GetBit(3);
			MainRegisters.Flag5 = newValue.GetBit(5);
            return 8;
        }

    }
}