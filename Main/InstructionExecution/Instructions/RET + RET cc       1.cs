// AUTOGENERATED CODE
//
// Do not make changes directly to this (.cs) file.
// Change RET + RET cc       .tt instead.

namespace Konamiman.Z80dotNet
{
    public partial class Z80InstructionExecutor
    {
        /// <summary>
        /// The RET instruction.
        /// </summary>
        private byte RET()
        {
            FetchFinished();

			var sp = Registers.SP.ToUShort();
            var newPC = NumberUtils.CreateShort(
                ProcessorAgent.ReadFromMemory(sp),
                ProcessorAgent.ReadFromMemory(sp.Inc()));
            Registers.PC = newPC.ToUShort();

            Registers.SP = Registers.SP.Add(2);

            return 11;
        }

        /// <summary>
        /// The RET C instruction.
        /// </summary>
        private byte RET_C()
        {
            FetchFinished();

            if(Registers.CF == 0)
                return 5;

			var sp = Registers.SP.ToUShort();
            var newPC = NumberUtils.CreateShort(
                ProcessorAgent.ReadFromMemory(sp),
                ProcessorAgent.ReadFromMemory(sp.Inc()));
            Registers.PC = newPC.ToUShort();

            Registers.SP = Registers.SP.Add(2);

            return 11;
        }

        /// <summary>
        /// The RET NC instruction.
        /// </summary>
        private byte RET_NC()
        {
            FetchFinished();

            if(Registers.CF == 1)
                return 5;

			var sp = Registers.SP.ToUShort();
            var newPC = NumberUtils.CreateShort(
                ProcessorAgent.ReadFromMemory(sp),
                ProcessorAgent.ReadFromMemory(sp.Inc()));
            Registers.PC = newPC.ToUShort();

            Registers.SP = Registers.SP.Add(2);

            return 11;
        }

        /// <summary>
        /// The RET Z instruction.
        /// </summary>
        private byte RET_Z()
        {
            FetchFinished();

            if(Registers.ZF == 0)
                return 5;

			var sp = Registers.SP.ToUShort();
            var newPC = NumberUtils.CreateShort(
                ProcessorAgent.ReadFromMemory(sp),
                ProcessorAgent.ReadFromMemory(sp.Inc()));
            Registers.PC = newPC.ToUShort();

            Registers.SP = Registers.SP.Add(2);

            return 11;
        }

        /// <summary>
        /// The RET NZ instruction.
        /// </summary>
        private byte RET_NZ()
        {
            FetchFinished();

            if(Registers.ZF == 1)
                return 5;

			var sp = Registers.SP.ToUShort();
            var newPC = NumberUtils.CreateShort(
                ProcessorAgent.ReadFromMemory(sp),
                ProcessorAgent.ReadFromMemory(sp.Inc()));
            Registers.PC = newPC.ToUShort();

            Registers.SP = Registers.SP.Add(2);

            return 11;
        }

        /// <summary>
        /// The RET PE instruction.
        /// </summary>
        private byte RET_PE()
        {
            FetchFinished();

            if(Registers.PF == 0)
                return 5;

			var sp = Registers.SP.ToUShort();
            var newPC = NumberUtils.CreateShort(
                ProcessorAgent.ReadFromMemory(sp),
                ProcessorAgent.ReadFromMemory(sp.Inc()));
            Registers.PC = newPC.ToUShort();

            Registers.SP = Registers.SP.Add(2);

            return 11;
        }

        /// <summary>
        /// The RET PO instruction.
        /// </summary>
        private byte RET_PO()
        {
            FetchFinished();

            if(Registers.PF == 1)
                return 5;

			var sp = Registers.SP.ToUShort();
            var newPC = NumberUtils.CreateShort(
                ProcessorAgent.ReadFromMemory(sp),
                ProcessorAgent.ReadFromMemory(sp.Inc()));
            Registers.PC = newPC.ToUShort();

            Registers.SP = Registers.SP.Add(2);

            return 11;
        }

        /// <summary>
        /// The RET M instruction.
        /// </summary>
        private byte RET_M()
        {
            FetchFinished();

            if(Registers.SF == 0)
                return 5;

			var sp = Registers.SP.ToUShort();
            var newPC = NumberUtils.CreateShort(
                ProcessorAgent.ReadFromMemory(sp),
                ProcessorAgent.ReadFromMemory(sp.Inc()));
            Registers.PC = newPC.ToUShort();

            Registers.SP = Registers.SP.Add(2);

            return 11;
        }

        /// <summary>
        /// The RET P instruction.
        /// </summary>
        private byte RET_P()
        {
            FetchFinished();

            if(Registers.SF == 1)
                return 5;

			var sp = Registers.SP.ToUShort();
            var newPC = NumberUtils.CreateShort(
                ProcessorAgent.ReadFromMemory(sp),
                ProcessorAgent.ReadFromMemory(sp.Inc()));
            Registers.PC = newPC.ToUShort();

            Registers.SP = Registers.SP.Add(2);

            return 11;
        }

    }
}