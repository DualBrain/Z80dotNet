<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="_Utils.t4"#>
<#@ output extension=".cs" #>
// AUTOGENERATED CODE
//
// Do not make changes directly to this (.cs) file.
// Change <#=Path.GetFileName(Host.TemplateFile)#> instead.

namespace Konamiman.Z80dotNet
{
    public partial class Z80InstructionExecutor
    {
<# foreach(var reg in new[] {"A","B","C","D","E","H","L","aHL","n"}) {
   foreach(var withCarry in new[] {true, false}) {
   for(int i=0; i<=2; i++) {
	    var isAdd = (i==0);
	    var isSub = (i==1);
	    var isCP = (i==2);
	    if(isCP && withCarry) continue;
        var instrName = 
		   isCP ? "CP" :
		   isAdd && withCarry ? "ADC" :
		   isAdd && !withCarry ? "ADD" :
		   withCarry ? "SBC" : "SUB"; #>
        /// <summary>
        /// The <#=instrName#> <#=isAdd || (isSub && withCarry) ? "A," : ""#><#=reg=="aHL" ? "(HL)" : reg#> instruction.
        /// </summary>
        private byte <#=instrName#>_<#=isAdd || withCarry ? "A_" : ""#><#=reg#>()
        {
<# if(reg=="n") { #>
			var valueToAdd = ProcessorAgent.FetchNextOpcode();
<# } #>
            FetchFinished();

            var oldValue = Registers.A;
<# if(reg=="aHL") { #>
			var valueToAdd = ProcessorAgent.ReadFromMemory(Registers.HL.ToUShort());
<# } else if(reg!="n") { #>
            var valueToAdd = Registers.<#=reg#>;
<# } #>
			var newValue = (byte)oldValue.<#=isAdd ? "Add" : "Sub"#>(valueToAdd<# if(withCarry) { #> + Registers.CF<# } #>);
<# if(!isCP) { #>
            Registers.A = newValue;
<# } #>

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) <#=isAdd ? "<" : ">" #> (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == <#=isAdd ? 1 : 0#>) && (newValueMSB == <#=isAdd ? 0 : 1#>);
<# if(isAdd) { #>
            Registers.PF = (oldValueMSB == valueToAdd.GetBit(7)) && (oldValueMSB != newValueMSB);
<# } else { #>
			var valueToAddMSB = valueToAdd.GetBit(7);
			Registers.PF = (oldValueMSB != valueToAddMSB) && (valueToAddMSB == newValueMSB);
<# } #>

            Registers.NF = <#=isAdd ? 0 : 1#>;
            SetFlags3and5From(newValue);

            return <#=reg=="aHL" || reg=="n" ? 7 : 4#>;
        }

<# }}} #>
    }
}