// AUTOGENERATED CODE
//
// Do not make changes directly to this (.cs) file.
// Change ADD A,r     .tt instead.

namespace Konamiman.Z80dotNet
{
    public partial class Z80InstructionExecutor
    {
        /// <summary>
        /// The ADD A,A instruction.
        /// </summary>
        private byte ADD_A_A()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueAdded = Registers.A;
            var newValue = (byte)Registers.A.Add(valueAdded);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) < (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.PF = (oldValueMSB == valueAdded.GetBit(7)) && (oldValueMSB != newValueMSB);
            Registers.CF = (oldValueMSB == 1) && (newValueMSB == 0);
            Registers.NF = 0;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The ADD A,B instruction.
        /// </summary>
        private byte ADD_A_B()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueAdded = Registers.B;
            var newValue = (byte)Registers.A.Add(valueAdded);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) < (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.PF = (oldValueMSB == valueAdded.GetBit(7)) && (oldValueMSB != newValueMSB);
            Registers.CF = (oldValueMSB == 1) && (newValueMSB == 0);
            Registers.NF = 0;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The ADD A,C instruction.
        /// </summary>
        private byte ADD_A_C()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueAdded = Registers.C;
            var newValue = (byte)Registers.A.Add(valueAdded);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) < (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.PF = (oldValueMSB == valueAdded.GetBit(7)) && (oldValueMSB != newValueMSB);
            Registers.CF = (oldValueMSB == 1) && (newValueMSB == 0);
            Registers.NF = 0;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The ADD A,D instruction.
        /// </summary>
        private byte ADD_A_D()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueAdded = Registers.D;
            var newValue = (byte)Registers.A.Add(valueAdded);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) < (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.PF = (oldValueMSB == valueAdded.GetBit(7)) && (oldValueMSB != newValueMSB);
            Registers.CF = (oldValueMSB == 1) && (newValueMSB == 0);
            Registers.NF = 0;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The ADD A,E instruction.
        /// </summary>
        private byte ADD_A_E()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueAdded = Registers.E;
            var newValue = (byte)Registers.A.Add(valueAdded);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) < (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.PF = (oldValueMSB == valueAdded.GetBit(7)) && (oldValueMSB != newValueMSB);
            Registers.CF = (oldValueMSB == 1) && (newValueMSB == 0);
            Registers.NF = 0;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The ADD A,H instruction.
        /// </summary>
        private byte ADD_A_H()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueAdded = Registers.H;
            var newValue = (byte)Registers.A.Add(valueAdded);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) < (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.PF = (oldValueMSB == valueAdded.GetBit(7)) && (oldValueMSB != newValueMSB);
            Registers.CF = (oldValueMSB == 1) && (newValueMSB == 0);
            Registers.NF = 0;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The ADD A,L instruction.
        /// </summary>
        private byte ADD_A_L()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueAdded = Registers.L;
            var newValue = (byte)Registers.A.Add(valueAdded);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) < (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.PF = (oldValueMSB == valueAdded.GetBit(7)) && (oldValueMSB != newValueMSB);
            Registers.CF = (oldValueMSB == 1) && (newValueMSB == 0);
            Registers.NF = 0;
            SetFlags3and5From(newValue);

            return 4;
        }

    }
}