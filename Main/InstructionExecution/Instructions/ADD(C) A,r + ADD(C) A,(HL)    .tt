<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="_Utils.t4"#>
<#@ output extension=".cs" #>
// AUTOGENERATED CODE
//
// Do not make changes directly to this (.cs) file.
// Change <#=Path.GetFileName(Host.TemplateFile)#> instead.

namespace Konamiman.Z80dotNet
{
    public partial class Z80InstructionExecutor
    {
<# foreach(var reg in new[] {"A","B","C","D","E","H","L","aHL"}) {
   foreach(var withCarry in new[] {true, false}) {
        var instrName = withCarry? "ADC" : "ADD"; #>
        /// <summary>
        /// The <#=instrName#> A,<#=reg=="aHL" ? "(HL)" : reg#> instruction.
        /// </summary>
        private byte <#=instrName#>_A_<#=reg#>()
        {
            FetchFinished();

            var oldValue = Registers.A;
<# if(reg=="aHL") { #>
			var valueAdded = ProcessorAgent.ReadFromMemory(Registers.HL.ToUShort());
<# } else { #>
            var valueAdded = Registers.<#=reg#>;
<# } #>
			var newValue = (byte)oldValue.Add(valueAdded<# if(withCarry) { #> + Registers.CF<# } #>);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) < (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.PF = (oldValueMSB == valueAdded.GetBit(7)) && (oldValueMSB != newValueMSB);
            Registers.CF = (oldValueMSB == 1) && (newValueMSB == 0);
            Registers.NF = 0;
            SetFlags3and5From(newValue);

            return <#=reg=="aHL" ? 7 : 4#>;
        }

<# }} #>
    }
}