// AUTOGENERATED CODE
//
// Do not make changes directly to this (.cs) file.
// Change ADD + ADC + SUB + SBC + CP A, r + n + (HL).tt instead.

namespace Konamiman.Z80dotNet
{
    public partial class Z80InstructionExecutor
    {
        /// <summary>
        /// The ADC A,A instruction.
        /// </summary>
        private byte ADC_A_A()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.A;
			var newValue = (byte)oldValue.Add(valueToAdd + Registers.CF);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) < (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 1) && (newValueMSB == 0);
            Registers.PF = (oldValueMSB == valueToAdd.GetBit(7)) && (oldValueMSB != newValueMSB);

            Registers.NF = 0;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The SBC A,A instruction.
        /// </summary>
        private byte SBC_A_A()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.A;
			var newValue = (byte)oldValue.Sub(valueToAdd + Registers.CF);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) > (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 0) && (newValueMSB == 1);
			var valueToAddMSB = valueToAdd.GetBit(7);
			Registers.PF = (oldValueMSB != valueToAddMSB) && (valueToAddMSB == newValueMSB);

            Registers.NF = 1;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The ADD A,A instruction.
        /// </summary>
        private byte ADD_A_A()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.A;
			var newValue = (byte)oldValue.Add(valueToAdd);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) < (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 1) && (newValueMSB == 0);
            Registers.PF = (oldValueMSB == valueToAdd.GetBit(7)) && (oldValueMSB != newValueMSB);

            Registers.NF = 0;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The SUB A instruction.
        /// </summary>
        private byte SUB_A()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.A;
			var newValue = (byte)oldValue.Sub(valueToAdd);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) > (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 0) && (newValueMSB == 1);
			var valueToAddMSB = valueToAdd.GetBit(7);
			Registers.PF = (oldValueMSB != valueToAddMSB) && (valueToAddMSB == newValueMSB);

            Registers.NF = 1;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The CP A instruction.
        /// </summary>
        private byte CP_A()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.A;
			var newValue = (byte)oldValue.Sub(valueToAdd);

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) > (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 0) && (newValueMSB == 1);
			var valueToAddMSB = valueToAdd.GetBit(7);
			Registers.PF = (oldValueMSB != valueToAddMSB) && (valueToAddMSB == newValueMSB);

            Registers.NF = 1;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The ADC A,B instruction.
        /// </summary>
        private byte ADC_A_B()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.B;
			var newValue = (byte)oldValue.Add(valueToAdd + Registers.CF);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) < (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 1) && (newValueMSB == 0);
            Registers.PF = (oldValueMSB == valueToAdd.GetBit(7)) && (oldValueMSB != newValueMSB);

            Registers.NF = 0;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The SBC A,B instruction.
        /// </summary>
        private byte SBC_A_B()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.B;
			var newValue = (byte)oldValue.Sub(valueToAdd + Registers.CF);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) > (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 0) && (newValueMSB == 1);
			var valueToAddMSB = valueToAdd.GetBit(7);
			Registers.PF = (oldValueMSB != valueToAddMSB) && (valueToAddMSB == newValueMSB);

            Registers.NF = 1;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The ADD A,B instruction.
        /// </summary>
        private byte ADD_A_B()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.B;
			var newValue = (byte)oldValue.Add(valueToAdd);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) < (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 1) && (newValueMSB == 0);
            Registers.PF = (oldValueMSB == valueToAdd.GetBit(7)) && (oldValueMSB != newValueMSB);

            Registers.NF = 0;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The SUB B instruction.
        /// </summary>
        private byte SUB_B()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.B;
			var newValue = (byte)oldValue.Sub(valueToAdd);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) > (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 0) && (newValueMSB == 1);
			var valueToAddMSB = valueToAdd.GetBit(7);
			Registers.PF = (oldValueMSB != valueToAddMSB) && (valueToAddMSB == newValueMSB);

            Registers.NF = 1;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The CP B instruction.
        /// </summary>
        private byte CP_B()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.B;
			var newValue = (byte)oldValue.Sub(valueToAdd);

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) > (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 0) && (newValueMSB == 1);
			var valueToAddMSB = valueToAdd.GetBit(7);
			Registers.PF = (oldValueMSB != valueToAddMSB) && (valueToAddMSB == newValueMSB);

            Registers.NF = 1;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The ADC A,C instruction.
        /// </summary>
        private byte ADC_A_C()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.C;
			var newValue = (byte)oldValue.Add(valueToAdd + Registers.CF);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) < (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 1) && (newValueMSB == 0);
            Registers.PF = (oldValueMSB == valueToAdd.GetBit(7)) && (oldValueMSB != newValueMSB);

            Registers.NF = 0;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The SBC A,C instruction.
        /// </summary>
        private byte SBC_A_C()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.C;
			var newValue = (byte)oldValue.Sub(valueToAdd + Registers.CF);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) > (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 0) && (newValueMSB == 1);
			var valueToAddMSB = valueToAdd.GetBit(7);
			Registers.PF = (oldValueMSB != valueToAddMSB) && (valueToAddMSB == newValueMSB);

            Registers.NF = 1;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The ADD A,C instruction.
        /// </summary>
        private byte ADD_A_C()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.C;
			var newValue = (byte)oldValue.Add(valueToAdd);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) < (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 1) && (newValueMSB == 0);
            Registers.PF = (oldValueMSB == valueToAdd.GetBit(7)) && (oldValueMSB != newValueMSB);

            Registers.NF = 0;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The SUB C instruction.
        /// </summary>
        private byte SUB_C()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.C;
			var newValue = (byte)oldValue.Sub(valueToAdd);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) > (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 0) && (newValueMSB == 1);
			var valueToAddMSB = valueToAdd.GetBit(7);
			Registers.PF = (oldValueMSB != valueToAddMSB) && (valueToAddMSB == newValueMSB);

            Registers.NF = 1;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The CP C instruction.
        /// </summary>
        private byte CP_C()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.C;
			var newValue = (byte)oldValue.Sub(valueToAdd);

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) > (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 0) && (newValueMSB == 1);
			var valueToAddMSB = valueToAdd.GetBit(7);
			Registers.PF = (oldValueMSB != valueToAddMSB) && (valueToAddMSB == newValueMSB);

            Registers.NF = 1;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The ADC A,D instruction.
        /// </summary>
        private byte ADC_A_D()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.D;
			var newValue = (byte)oldValue.Add(valueToAdd + Registers.CF);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) < (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 1) && (newValueMSB == 0);
            Registers.PF = (oldValueMSB == valueToAdd.GetBit(7)) && (oldValueMSB != newValueMSB);

            Registers.NF = 0;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The SBC A,D instruction.
        /// </summary>
        private byte SBC_A_D()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.D;
			var newValue = (byte)oldValue.Sub(valueToAdd + Registers.CF);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) > (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 0) && (newValueMSB == 1);
			var valueToAddMSB = valueToAdd.GetBit(7);
			Registers.PF = (oldValueMSB != valueToAddMSB) && (valueToAddMSB == newValueMSB);

            Registers.NF = 1;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The ADD A,D instruction.
        /// </summary>
        private byte ADD_A_D()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.D;
			var newValue = (byte)oldValue.Add(valueToAdd);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) < (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 1) && (newValueMSB == 0);
            Registers.PF = (oldValueMSB == valueToAdd.GetBit(7)) && (oldValueMSB != newValueMSB);

            Registers.NF = 0;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The SUB D instruction.
        /// </summary>
        private byte SUB_D()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.D;
			var newValue = (byte)oldValue.Sub(valueToAdd);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) > (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 0) && (newValueMSB == 1);
			var valueToAddMSB = valueToAdd.GetBit(7);
			Registers.PF = (oldValueMSB != valueToAddMSB) && (valueToAddMSB == newValueMSB);

            Registers.NF = 1;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The CP D instruction.
        /// </summary>
        private byte CP_D()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.D;
			var newValue = (byte)oldValue.Sub(valueToAdd);

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) > (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 0) && (newValueMSB == 1);
			var valueToAddMSB = valueToAdd.GetBit(7);
			Registers.PF = (oldValueMSB != valueToAddMSB) && (valueToAddMSB == newValueMSB);

            Registers.NF = 1;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The ADC A,E instruction.
        /// </summary>
        private byte ADC_A_E()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.E;
			var newValue = (byte)oldValue.Add(valueToAdd + Registers.CF);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) < (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 1) && (newValueMSB == 0);
            Registers.PF = (oldValueMSB == valueToAdd.GetBit(7)) && (oldValueMSB != newValueMSB);

            Registers.NF = 0;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The SBC A,E instruction.
        /// </summary>
        private byte SBC_A_E()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.E;
			var newValue = (byte)oldValue.Sub(valueToAdd + Registers.CF);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) > (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 0) && (newValueMSB == 1);
			var valueToAddMSB = valueToAdd.GetBit(7);
			Registers.PF = (oldValueMSB != valueToAddMSB) && (valueToAddMSB == newValueMSB);

            Registers.NF = 1;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The ADD A,E instruction.
        /// </summary>
        private byte ADD_A_E()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.E;
			var newValue = (byte)oldValue.Add(valueToAdd);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) < (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 1) && (newValueMSB == 0);
            Registers.PF = (oldValueMSB == valueToAdd.GetBit(7)) && (oldValueMSB != newValueMSB);

            Registers.NF = 0;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The SUB E instruction.
        /// </summary>
        private byte SUB_E()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.E;
			var newValue = (byte)oldValue.Sub(valueToAdd);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) > (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 0) && (newValueMSB == 1);
			var valueToAddMSB = valueToAdd.GetBit(7);
			Registers.PF = (oldValueMSB != valueToAddMSB) && (valueToAddMSB == newValueMSB);

            Registers.NF = 1;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The CP E instruction.
        /// </summary>
        private byte CP_E()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.E;
			var newValue = (byte)oldValue.Sub(valueToAdd);

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) > (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 0) && (newValueMSB == 1);
			var valueToAddMSB = valueToAdd.GetBit(7);
			Registers.PF = (oldValueMSB != valueToAddMSB) && (valueToAddMSB == newValueMSB);

            Registers.NF = 1;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The ADC A,H instruction.
        /// </summary>
        private byte ADC_A_H()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.H;
			var newValue = (byte)oldValue.Add(valueToAdd + Registers.CF);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) < (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 1) && (newValueMSB == 0);
            Registers.PF = (oldValueMSB == valueToAdd.GetBit(7)) && (oldValueMSB != newValueMSB);

            Registers.NF = 0;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The SBC A,H instruction.
        /// </summary>
        private byte SBC_A_H()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.H;
			var newValue = (byte)oldValue.Sub(valueToAdd + Registers.CF);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) > (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 0) && (newValueMSB == 1);
			var valueToAddMSB = valueToAdd.GetBit(7);
			Registers.PF = (oldValueMSB != valueToAddMSB) && (valueToAddMSB == newValueMSB);

            Registers.NF = 1;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The ADD A,H instruction.
        /// </summary>
        private byte ADD_A_H()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.H;
			var newValue = (byte)oldValue.Add(valueToAdd);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) < (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 1) && (newValueMSB == 0);
            Registers.PF = (oldValueMSB == valueToAdd.GetBit(7)) && (oldValueMSB != newValueMSB);

            Registers.NF = 0;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The SUB H instruction.
        /// </summary>
        private byte SUB_H()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.H;
			var newValue = (byte)oldValue.Sub(valueToAdd);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) > (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 0) && (newValueMSB == 1);
			var valueToAddMSB = valueToAdd.GetBit(7);
			Registers.PF = (oldValueMSB != valueToAddMSB) && (valueToAddMSB == newValueMSB);

            Registers.NF = 1;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The CP H instruction.
        /// </summary>
        private byte CP_H()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.H;
			var newValue = (byte)oldValue.Sub(valueToAdd);

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) > (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 0) && (newValueMSB == 1);
			var valueToAddMSB = valueToAdd.GetBit(7);
			Registers.PF = (oldValueMSB != valueToAddMSB) && (valueToAddMSB == newValueMSB);

            Registers.NF = 1;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The ADC A,L instruction.
        /// </summary>
        private byte ADC_A_L()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.L;
			var newValue = (byte)oldValue.Add(valueToAdd + Registers.CF);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) < (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 1) && (newValueMSB == 0);
            Registers.PF = (oldValueMSB == valueToAdd.GetBit(7)) && (oldValueMSB != newValueMSB);

            Registers.NF = 0;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The SBC A,L instruction.
        /// </summary>
        private byte SBC_A_L()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.L;
			var newValue = (byte)oldValue.Sub(valueToAdd + Registers.CF);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) > (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 0) && (newValueMSB == 1);
			var valueToAddMSB = valueToAdd.GetBit(7);
			Registers.PF = (oldValueMSB != valueToAddMSB) && (valueToAddMSB == newValueMSB);

            Registers.NF = 1;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The ADD A,L instruction.
        /// </summary>
        private byte ADD_A_L()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.L;
			var newValue = (byte)oldValue.Add(valueToAdd);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) < (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 1) && (newValueMSB == 0);
            Registers.PF = (oldValueMSB == valueToAdd.GetBit(7)) && (oldValueMSB != newValueMSB);

            Registers.NF = 0;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The SUB L instruction.
        /// </summary>
        private byte SUB_L()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.L;
			var newValue = (byte)oldValue.Sub(valueToAdd);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) > (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 0) && (newValueMSB == 1);
			var valueToAddMSB = valueToAdd.GetBit(7);
			Registers.PF = (oldValueMSB != valueToAddMSB) && (valueToAddMSB == newValueMSB);

            Registers.NF = 1;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The CP L instruction.
        /// </summary>
        private byte CP_L()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.L;
			var newValue = (byte)oldValue.Sub(valueToAdd);

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) > (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 0) && (newValueMSB == 1);
			var valueToAddMSB = valueToAdd.GetBit(7);
			Registers.PF = (oldValueMSB != valueToAddMSB) && (valueToAddMSB == newValueMSB);

            Registers.NF = 1;
            SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The ADC A,(HL) instruction.
        /// </summary>
        private byte ADC_A_aHL()
        {
            FetchFinished();

            var oldValue = Registers.A;
			var valueToAdd = ProcessorAgent.ReadFromMemory(Registers.HL.ToUShort());
			var newValue = (byte)oldValue.Add(valueToAdd + Registers.CF);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) < (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 1) && (newValueMSB == 0);
            Registers.PF = (oldValueMSB == valueToAdd.GetBit(7)) && (oldValueMSB != newValueMSB);

            Registers.NF = 0;
            SetFlags3and5From(newValue);

            return 7;
        }

        /// <summary>
        /// The SBC A,(HL) instruction.
        /// </summary>
        private byte SBC_A_aHL()
        {
            FetchFinished();

            var oldValue = Registers.A;
			var valueToAdd = ProcessorAgent.ReadFromMemory(Registers.HL.ToUShort());
			var newValue = (byte)oldValue.Sub(valueToAdd + Registers.CF);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) > (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 0) && (newValueMSB == 1);
			var valueToAddMSB = valueToAdd.GetBit(7);
			Registers.PF = (oldValueMSB != valueToAddMSB) && (valueToAddMSB == newValueMSB);

            Registers.NF = 1;
            SetFlags3and5From(newValue);

            return 7;
        }

        /// <summary>
        /// The ADD A,(HL) instruction.
        /// </summary>
        private byte ADD_A_aHL()
        {
            FetchFinished();

            var oldValue = Registers.A;
			var valueToAdd = ProcessorAgent.ReadFromMemory(Registers.HL.ToUShort());
			var newValue = (byte)oldValue.Add(valueToAdd);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) < (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 1) && (newValueMSB == 0);
            Registers.PF = (oldValueMSB == valueToAdd.GetBit(7)) && (oldValueMSB != newValueMSB);

            Registers.NF = 0;
            SetFlags3and5From(newValue);

            return 7;
        }

        /// <summary>
        /// The SUB (HL) instruction.
        /// </summary>
        private byte SUB_aHL()
        {
            FetchFinished();

            var oldValue = Registers.A;
			var valueToAdd = ProcessorAgent.ReadFromMemory(Registers.HL.ToUShort());
			var newValue = (byte)oldValue.Sub(valueToAdd);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) > (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 0) && (newValueMSB == 1);
			var valueToAddMSB = valueToAdd.GetBit(7);
			Registers.PF = (oldValueMSB != valueToAddMSB) && (valueToAddMSB == newValueMSB);

            Registers.NF = 1;
            SetFlags3and5From(newValue);

            return 7;
        }

        /// <summary>
        /// The CP (HL) instruction.
        /// </summary>
        private byte CP_aHL()
        {
            FetchFinished();

            var oldValue = Registers.A;
			var valueToAdd = ProcessorAgent.ReadFromMemory(Registers.HL.ToUShort());
			var newValue = (byte)oldValue.Sub(valueToAdd);

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) > (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 0) && (newValueMSB == 1);
			var valueToAddMSB = valueToAdd.GetBit(7);
			Registers.PF = (oldValueMSB != valueToAddMSB) && (valueToAddMSB == newValueMSB);

            Registers.NF = 1;
            SetFlags3and5From(newValue);

            return 7;
        }

        /// <summary>
        /// The ADC A,n instruction.
        /// </summary>
        private byte ADC_A_n()
        {
			var valueToAdd = ProcessorAgent.FetchNextOpcode();
            FetchFinished();

            var oldValue = Registers.A;
			var newValue = (byte)oldValue.Add(valueToAdd + Registers.CF);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) < (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 1) && (newValueMSB == 0);
            Registers.PF = (oldValueMSB == valueToAdd.GetBit(7)) && (oldValueMSB != newValueMSB);

            Registers.NF = 0;
            SetFlags3and5From(newValue);

            return 7;
        }

        /// <summary>
        /// The SBC A,n instruction.
        /// </summary>
        private byte SBC_A_n()
        {
			var valueToAdd = ProcessorAgent.FetchNextOpcode();
            FetchFinished();

            var oldValue = Registers.A;
			var newValue = (byte)oldValue.Sub(valueToAdd + Registers.CF);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) > (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 0) && (newValueMSB == 1);
			var valueToAddMSB = valueToAdd.GetBit(7);
			Registers.PF = (oldValueMSB != valueToAddMSB) && (valueToAddMSB == newValueMSB);

            Registers.NF = 1;
            SetFlags3and5From(newValue);

            return 7;
        }

        /// <summary>
        /// The ADD A,n instruction.
        /// </summary>
        private byte ADD_A_n()
        {
			var valueToAdd = ProcessorAgent.FetchNextOpcode();
            FetchFinished();

            var oldValue = Registers.A;
			var newValue = (byte)oldValue.Add(valueToAdd);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) < (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 1) && (newValueMSB == 0);
            Registers.PF = (oldValueMSB == valueToAdd.GetBit(7)) && (oldValueMSB != newValueMSB);

            Registers.NF = 0;
            SetFlags3and5From(newValue);

            return 7;
        }

        /// <summary>
        /// The SUB n instruction.
        /// </summary>
        private byte SUB_n()
        {
			var valueToAdd = ProcessorAgent.FetchNextOpcode();
            FetchFinished();

            var oldValue = Registers.A;
			var newValue = (byte)oldValue.Sub(valueToAdd);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) > (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 0) && (newValueMSB == 1);
			var valueToAddMSB = valueToAdd.GetBit(7);
			Registers.PF = (oldValueMSB != valueToAddMSB) && (valueToAddMSB == newValueMSB);

            Registers.NF = 1;
            SetFlags3and5From(newValue);

            return 7;
        }

        /// <summary>
        /// The CP n instruction.
        /// </summary>
        private byte CP_n()
        {
			var valueToAdd = ProcessorAgent.FetchNextOpcode();
            FetchFinished();

            var oldValue = Registers.A;
			var newValue = (byte)oldValue.Sub(valueToAdd);

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) > (oldValue & 0x0F);
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == 0) && (newValueMSB == 1);
			var valueToAddMSB = valueToAdd.GetBit(7);
			Registers.PF = (oldValueMSB != valueToAddMSB) && (valueToAddMSB == newValueMSB);

            Registers.NF = 1;
            SetFlags3and5From(newValue);

            return 7;
        }

    }
}