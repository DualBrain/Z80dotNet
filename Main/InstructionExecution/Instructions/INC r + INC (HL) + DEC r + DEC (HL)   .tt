<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="..\..\..\_Utils.t4"#>
<#@ output extension=".cs" #>
// AUTOGENERATED CODE
//
// Do not make changes directly to this (.cs) file.
// Change <#=Path.GetFileName(Host.TemplateFile)#> instead.

namespace Konamiman.Z80dotNet
{
    public partial class Z80InstructionExecutor
    {
<# foreach(var reg in new[] {"A","B","C","D","E","H","L","IXH","IXL","IYH","IYL","aHL"}) {
   foreach(var isInc in new[] {true, false}) { #>
        /// <summary>
        /// The <#=isInc ? "INC" : "DEC"#> <#=reg=="aHL" ? "(HL)" : reg#> instruction.
        /// </summary>
        private byte <#=isInc ? "INC" : "DEC"#>_<#=reg#>()
        {
            FetchFinished();

<# if(reg=="aHL") { #>
			var address = Registers.HL.ToUShort();
			var oldValue = ProcessorAgent.ReadFromMemory(address);
			var newValue = oldValue.<#=isInc ? "Inc" : "Dec"#>();
			ProcessorAgent.WriteToMemory(address, newValue);
<# } else { #>
            var newValue = <#=Register(reg)#>.<#=isInc ? "Inc" : "Dec"#>();
            <#=Register(reg)#> = newValue;
<# } #>

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = ((newValue & 0x0F) == 0x0<#=isInc ? "0" : "F"#>);
            Registers.PF = (newValue == 0x<#=isInc ? "80" : "7F"#>);
            Registers.NF = <#=isInc ? "0" : "1"#>;
			SetFlags3and5From(newValue);

            return <#=reg=="aHL" ? 11 : (IsIndexRegister(reg) ? 8 : 4) #>;
        }

<# }} #>
    }
}