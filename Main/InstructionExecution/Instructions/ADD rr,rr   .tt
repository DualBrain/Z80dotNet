<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="..\..\..\_Utils.t4"#>
<#@ output extension=".cs" #>
// AUTOGENERATED CODE
//
// Do not make changes directly to this (.cs) file.
// Change <#=Path.GetFileName(Host.TemplateFile)#> instead.

namespace Konamiman.Z80dotNet
{
    public partial class Z80InstructionExecutor
    {
<# foreach(var pair in new[] {"HL.BC","HL.DE","HL.HL","HL.SP","IX.BC","IX.DE","IX.IX","IX.SP","IY.BC","IY.DE","IY.IY","IY.SP"}) {
        var parts = pair.Split('.');
        var dest = parts[0];
        var src = parts[1];
        var high = dest == "HL" ? "H" : dest + "H"; #>
        /// <summary>
        /// The ADD <#=dest#>,<#=src#> instruction
        /// </summary>
        byte ADD_<#=dest#>_<#=src#>()
        {
            FetchFinished();

            var previousHighByte = Registers.<#=high#>;
            Registers.<#=dest#> = Registers.<#=dest#>.Add(Registers.<#=src#>);
            var newHighByte = Registers.<#=high#>;
            Registers.CF = (previousHighByte.GetBit(7) == 1) && (newHighByte.GetBit(7) == 0);
            Registers.HF = (newHighByte & 0x0F) < (previousHighByte & 0x0F);
            Registers.NF = 0;
            SetFlags3and5From(newHighByte);

            return <#=IfIndexRegister(dest, 15, @else: 11)#>;
        }

<# } #>
    }
}
