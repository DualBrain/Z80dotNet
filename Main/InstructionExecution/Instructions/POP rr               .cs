// AUTOGENERATED CODE
//
// Do not make changes directly to this (.cs) file.
// Change POP rr               .tt instead.

namespace Konamiman.Z80dotNet
{
    public partial class Z80InstructionExecutor
    {
        /// <summary>
        /// The POP AF instruction.
        /// </summary>
        private byte POP_AF()
        {
            FetchFinished();

			var sp = Registers.SP.ToUShort();
            var newAF = NumberUtils.CreateShort(
                ProcessorAgent.ReadFromMemory(sp),
                ProcessorAgent.ReadFromMemory(sp.Inc()));
            Registers.AF = newAF;

            Registers.SP = Registers.SP.Add(2);

            return 10;
        }

        /// <summary>
        /// The POP BC instruction.
        /// </summary>
        private byte POP_BC()
        {
            FetchFinished();

			var sp = Registers.SP.ToUShort();
            var newBC = NumberUtils.CreateShort(
                ProcessorAgent.ReadFromMemory(sp),
                ProcessorAgent.ReadFromMemory(sp.Inc()));
            Registers.BC = newBC;

            Registers.SP = Registers.SP.Add(2);

            return 10;
        }

        /// <summary>
        /// The POP DE instruction.
        /// </summary>
        private byte POP_DE()
        {
            FetchFinished();

			var sp = Registers.SP.ToUShort();
            var newDE = NumberUtils.CreateShort(
                ProcessorAgent.ReadFromMemory(sp),
                ProcessorAgent.ReadFromMemory(sp.Inc()));
            Registers.DE = newDE;

            Registers.SP = Registers.SP.Add(2);

            return 10;
        }

        /// <summary>
        /// The POP HL instruction.
        /// </summary>
        private byte POP_HL()
        {
            FetchFinished();

			var sp = Registers.SP.ToUShort();
            var newHL = NumberUtils.CreateShort(
                ProcessorAgent.ReadFromMemory(sp),
                ProcessorAgent.ReadFromMemory(sp.Inc()));
            Registers.HL = newHL;

            Registers.SP = Registers.SP.Add(2);

            return 10;
        }

    }
}