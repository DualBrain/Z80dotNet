<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="_Utils.t4"#>
<#@ output extension=".cs" #>
<#AutoGeneratedCodeWarning();#>

namespace Konamiman.Z80dotNet
{
    public partial class Z80InstructionExecutor
    {
<# var instructions = new[] {"INI", "IND", "INIR", "INDR"};
   for(int i=0; i<=3; i++) { 
		var instr = instructions[i];
        var isInc = (i == 0 || i == 2);
        var isRepeat = (i == 2 || i == 3); #>
        /// <summary>
        /// The <#=instr#> instruction.
        /// </summary>
        byte <#=instr#>()
        {
            FetchFinished();

            var portNumber = Registers.C;
            var address = Registers.HL;
            var value = ProcessorAgent.ReadFromPort(portNumber);
            ProcessorAgent.WriteToMemory(address.ToUShort(), value);

            Registers.HL = address.<#=isInc ? "Inc" : "Dec" #>();
            var counter = Registers.B;
            counter = counter.Dec();
            Registers.B = counter;
            Registers.ZF = (counter == 0);
            Registers.NF = 1;
            Registers.SF = counter.GetBit(7);
            SetFlags3and5From(counter);

<# if(isRepeat) { #>
			if(counter != 0) {
				Registers.PC = Registers.PC.Sub(2);
				return 21;
			}
<# } #>

            return 16;
        }

<# } #>
    }
}
