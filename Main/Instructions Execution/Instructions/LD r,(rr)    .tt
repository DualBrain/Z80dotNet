<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="_Utils.t4"#>
<#@ output extension=".cs" #>
<#AutoGeneratedCodeWarning();#>

namespace Konamiman.Z80dotNet
{
    public partial class Z80InstructionExecutor
    {
<# foreach(var pointer in new[] {"(BC)","(DE)","(HL)", "(IX+n)", "(IY+n)"}) { #>
<# foreach(var reg in new[] {"A","B","C","D","E","H","L"}) {
        var isIndex = pointer.StartsWith("(I");
		if(pointer.Length == 4 && pointer != "(HL)" && reg!="A") continue;
        var instrName = string.Format("LD {0},{1}", reg, pointer);
        var methodName = string.Format("LD_{0}_{1}", reg, MethodRegPartName(pointer));
		#>
        /// <summary>
        /// The <#=instrName#> instruction.
        /// </summary>
        byte <#=methodName#>()
        {
<# ReadOffset(pointer);#>
		    FetchFinished();

<# GetOldValueFromRegOrMem(pointer);#>
        Registers.<#=reg#> = oldValue;

            return <#=isIndex ? 19 : 7#>;
        }

<# }} #>
    }
}
