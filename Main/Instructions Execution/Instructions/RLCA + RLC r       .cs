// AUTOGENERATED CODE
//
// Do not make changes directly to this (.cs) file.
// Change "RLCA + RLC r       .tt" instead.

namespace Konamiman.Z80dotNet
{
    public partial class Z80InstructionExecutor
    {
		/// <summary>
        /// The RLC A instruction
        /// </summary>
        byte RLC_A()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
            Registers.A = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
			Registers.PF = Parity[newValue];

			return 8;
        }

		/// <summary>
        /// The RLC B instruction
        /// </summary>
        byte RLC_B()
        {
            FetchFinished();

            var oldValue = Registers.B;
            var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
            Registers.B = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
			Registers.PF = Parity[newValue];

			return 8;
        }

		/// <summary>
        /// The RLC C instruction
        /// </summary>
        byte RLC_C()
        {
            FetchFinished();

            var oldValue = Registers.C;
            var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
            Registers.C = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
			Registers.PF = Parity[newValue];

			return 8;
        }

		/// <summary>
        /// The RLC D instruction
        /// </summary>
        byte RLC_D()
        {
            FetchFinished();

            var oldValue = Registers.D;
            var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
            Registers.D = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
			Registers.PF = Parity[newValue];

			return 8;
        }

		/// <summary>
        /// The RLC E instruction
        /// </summary>
        byte RLC_E()
        {
            FetchFinished();

            var oldValue = Registers.E;
            var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
            Registers.E = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
			Registers.PF = Parity[newValue];

			return 8;
        }

		/// <summary>
        /// The RLC H instruction
        /// </summary>
        byte RLC_H()
        {
            FetchFinished();

            var oldValue = Registers.H;
            var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
            Registers.H = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
			Registers.PF = Parity[newValue];

			return 8;
        }

		/// <summary>
        /// The RLC L instruction
        /// </summary>
        byte RLC_L()
        {
            FetchFinished();

            var oldValue = Registers.L;
            var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
            Registers.L = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
			Registers.PF = Parity[newValue];

			return 8;
        }

		/// <summary>
        /// The RLC (HL) instruction
        /// </summary>
        byte RLC_aHL()
        {
            FetchFinished();

			var address = Registers.HL.ToUShort();
			var oldValue = ProcessorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
			ProcessorAgent.WriteToMemory(address, newValue);

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
			Registers.PF = Parity[newValue];

			return 15;
        }

		/// <summary>
        /// The RLCA instruction
        /// </summary>
        byte RLCA()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
            Registers.A = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            SetFlags3and5From(newValue);
            return 4;
        }

	}
}
