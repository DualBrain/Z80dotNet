
// AUTOGENERATED CODE
//
// Do not make changes directly to this (.cs) file.
// Change "LD r,(rr)    .tt" instead.

namespace Konamiman.Z80dotNet
{
    public partial class Z80InstructionExecutor
    {
        /// <summary>
        /// The LD A,(BC) instruction.
        /// </summary>
        byte LD_A_aBC()
        {
		    FetchFinished();

			var address = Registers.BC.ToUShort();
			var oldValue = ProcessorAgent.ReadFromMemory(address);
            Registers.A = oldValue;

            return 7;
        }

        /// <summary>
        /// The LD A,(DE) instruction.
        /// </summary>
        byte LD_A_aDE()
        {
		    FetchFinished();

			var address = Registers.DE.ToUShort();
			var oldValue = ProcessorAgent.ReadFromMemory(address);
            Registers.A = oldValue;

            return 7;
        }

        /// <summary>
        /// The LD A,(HL) instruction.
        /// </summary>
        byte LD_A_aHL()
        {
		    FetchFinished();

			var address = Registers.HL.ToUShort();
			var oldValue = ProcessorAgent.ReadFromMemory(address);
            Registers.A = oldValue;

            return 7;
        }

        /// <summary>
        /// The LD B,(HL) instruction.
        /// </summary>
        byte LD_B_aHL()
        {
		    FetchFinished();

			var address = Registers.HL.ToUShort();
			var oldValue = ProcessorAgent.ReadFromMemory(address);
            Registers.B = oldValue;

            return 7;
        }

        /// <summary>
        /// The LD C,(HL) instruction.
        /// </summary>
        byte LD_C_aHL()
        {
		    FetchFinished();

			var address = Registers.HL.ToUShort();
			var oldValue = ProcessorAgent.ReadFromMemory(address);
            Registers.C = oldValue;

            return 7;
        }

        /// <summary>
        /// The LD D,(HL) instruction.
        /// </summary>
        byte LD_D_aHL()
        {
		    FetchFinished();

			var address = Registers.HL.ToUShort();
			var oldValue = ProcessorAgent.ReadFromMemory(address);
            Registers.D = oldValue;

            return 7;
        }

        /// <summary>
        /// The LD E,(HL) instruction.
        /// </summary>
        byte LD_E_aHL()
        {
		    FetchFinished();

			var address = Registers.HL.ToUShort();
			var oldValue = ProcessorAgent.ReadFromMemory(address);
            Registers.E = oldValue;

            return 7;
        }

        /// <summary>
        /// The LD H,(HL) instruction.
        /// </summary>
        byte LD_H_aHL()
        {
		    FetchFinished();

			var address = Registers.HL.ToUShort();
			var oldValue = ProcessorAgent.ReadFromMemory(address);
            Registers.H = oldValue;

            return 7;
        }

        /// <summary>
        /// The LD L,(HL) instruction.
        /// </summary>
        byte LD_L_aHL()
        {
		    FetchFinished();

			var address = Registers.HL.ToUShort();
			var oldValue = ProcessorAgent.ReadFromMemory(address);
            Registers.L = oldValue;

            return 7;
        }

        /// <summary>
        /// The LD A,(IX+n) instruction.
        /// </summary>
        byte LD_A_aIX_plus_n()
        {
			var offset = ProcessorAgent.FetchNextOpcode();
		    FetchFinished();

			var address = Registers.IX.ToUShort().Add(offset.ToSignedByte());
			var oldValue = ProcessorAgent.ReadFromMemory(address);
	        Registers.A = oldValue;

            return 19;
        }

        /// <summary>
        /// The LD B,(IX+n) instruction.
        /// </summary>
        byte LD_B_aIX_plus_n()
        {
			var offset = ProcessorAgent.FetchNextOpcode();
		    FetchFinished();

			var address = Registers.IX.ToUShort().Add(offset.ToSignedByte());
			var oldValue = ProcessorAgent.ReadFromMemory(address);
	        Registers.B = oldValue;

            return 19;
        }

        /// <summary>
        /// The LD C,(IX+n) instruction.
        /// </summary>
        byte LD_C_aIX_plus_n()
        {
			var offset = ProcessorAgent.FetchNextOpcode();
		    FetchFinished();

			var address = Registers.IX.ToUShort().Add(offset.ToSignedByte());
			var oldValue = ProcessorAgent.ReadFromMemory(address);
	        Registers.C = oldValue;

            return 19;
        }

        /// <summary>
        /// The LD D,(IX+n) instruction.
        /// </summary>
        byte LD_D_aIX_plus_n()
        {
			var offset = ProcessorAgent.FetchNextOpcode();
		    FetchFinished();

			var address = Registers.IX.ToUShort().Add(offset.ToSignedByte());
			var oldValue = ProcessorAgent.ReadFromMemory(address);
	        Registers.D = oldValue;

            return 19;
        }

        /// <summary>
        /// The LD E,(IX+n) instruction.
        /// </summary>
        byte LD_E_aIX_plus_n()
        {
			var offset = ProcessorAgent.FetchNextOpcode();
		    FetchFinished();

			var address = Registers.IX.ToUShort().Add(offset.ToSignedByte());
			var oldValue = ProcessorAgent.ReadFromMemory(address);
	        Registers.E = oldValue;

            return 19;
        }

        /// <summary>
        /// The LD H,(IX+n) instruction.
        /// </summary>
        byte LD_H_aIX_plus_n()
        {
			var offset = ProcessorAgent.FetchNextOpcode();
		    FetchFinished();

			var address = Registers.IX.ToUShort().Add(offset.ToSignedByte());
			var oldValue = ProcessorAgent.ReadFromMemory(address);
	        Registers.H = oldValue;

            return 19;
        }

        /// <summary>
        /// The LD L,(IX+n) instruction.
        /// </summary>
        byte LD_L_aIX_plus_n()
        {
			var offset = ProcessorAgent.FetchNextOpcode();
		    FetchFinished();

			var address = Registers.IX.ToUShort().Add(offset.ToSignedByte());
			var oldValue = ProcessorAgent.ReadFromMemory(address);
	        Registers.L = oldValue;

            return 19;
        }

        /// <summary>
        /// The LD A,(IY+n) instruction.
        /// </summary>
        byte LD_A_aIY_plus_n()
        {
			var offset = ProcessorAgent.FetchNextOpcode();
		    FetchFinished();

			var address = Registers.IY.ToUShort().Add(offset.ToSignedByte());
			var oldValue = ProcessorAgent.ReadFromMemory(address);
	        Registers.A = oldValue;

            return 19;
        }

        /// <summary>
        /// The LD B,(IY+n) instruction.
        /// </summary>
        byte LD_B_aIY_plus_n()
        {
			var offset = ProcessorAgent.FetchNextOpcode();
		    FetchFinished();

			var address = Registers.IY.ToUShort().Add(offset.ToSignedByte());
			var oldValue = ProcessorAgent.ReadFromMemory(address);
	        Registers.B = oldValue;

            return 19;
        }

        /// <summary>
        /// The LD C,(IY+n) instruction.
        /// </summary>
        byte LD_C_aIY_plus_n()
        {
			var offset = ProcessorAgent.FetchNextOpcode();
		    FetchFinished();

			var address = Registers.IY.ToUShort().Add(offset.ToSignedByte());
			var oldValue = ProcessorAgent.ReadFromMemory(address);
	        Registers.C = oldValue;

            return 19;
        }

        /// <summary>
        /// The LD D,(IY+n) instruction.
        /// </summary>
        byte LD_D_aIY_plus_n()
        {
			var offset = ProcessorAgent.FetchNextOpcode();
		    FetchFinished();

			var address = Registers.IY.ToUShort().Add(offset.ToSignedByte());
			var oldValue = ProcessorAgent.ReadFromMemory(address);
	        Registers.D = oldValue;

            return 19;
        }

        /// <summary>
        /// The LD E,(IY+n) instruction.
        /// </summary>
        byte LD_E_aIY_plus_n()
        {
			var offset = ProcessorAgent.FetchNextOpcode();
		    FetchFinished();

			var address = Registers.IY.ToUShort().Add(offset.ToSignedByte());
			var oldValue = ProcessorAgent.ReadFromMemory(address);
	        Registers.E = oldValue;

            return 19;
        }

        /// <summary>
        /// The LD H,(IY+n) instruction.
        /// </summary>
        byte LD_H_aIY_plus_n()
        {
			var offset = ProcessorAgent.FetchNextOpcode();
		    FetchFinished();

			var address = Registers.IY.ToUShort().Add(offset.ToSignedByte());
			var oldValue = ProcessorAgent.ReadFromMemory(address);
	        Registers.H = oldValue;

            return 19;
        }

        /// <summary>
        /// The LD L,(IY+n) instruction.
        /// </summary>
        byte LD_L_aIY_plus_n()
        {
			var offset = ProcessorAgent.FetchNextOpcode();
		    FetchFinished();

			var address = Registers.IY.ToUShort().Add(offset.ToSignedByte());
			var oldValue = ProcessorAgent.ReadFromMemory(address);
	        Registers.L = oldValue;

            return 19;
        }

    }
}
