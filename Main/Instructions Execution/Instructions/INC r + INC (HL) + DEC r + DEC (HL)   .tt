<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="_Utils.t4"#>
<#@ output extension=".cs" #>
<#AutoGeneratedCodeWarning();#>

namespace Konamiman.Z80dotNet
{
    public partial class Z80InstructionExecutor
    {
<# foreach(var reg in new[] {"A","B","C","D","E","H","L","IXH","IXL","IYH","IYL","(HL)"}) {
   foreach(var isInc in new[] {true, false}) {
        var isMemHL = (reg == "(HL)");
		var instrType = isInc ? "INC" : "DEC";
		var instrName = String.Format("{0} {1}", instrType, reg);
        var methodName = String.Format("{0}_{1}", instrType, (isMemHL ? "aHL" : reg)); #>
        /// <summary>
        /// The <#=instrName #> instruction.
        /// </summary>
        private byte <#=methodName #>()
        {
            FetchFinished();

<# GetOldValueFromRegOrMem(reg); #>
        var newValue = oldValue.<#=isInc ? "Inc" : "Dec"#>();
<# SetNewValueToRegOrMem(reg); #>

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = ((newValue & 0x0F) == 0x0<#=isInc ? "0" : "F"#>);
            Registers.PF = (newValue == 0x<#=isInc ? "80" : "7F"#>);
            Registers.NF = <#=isInc ? "0" : "1"#>;
			SetFlags3and5From(newValue);

            return <#=isMemHL ? 11 : (IsIndexRegister(reg) ? 8 : 4) #>;
        }

<# }} #>
    }
}