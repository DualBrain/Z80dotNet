<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="_Utils.t4"#>
<#@ output extension=".cs" #>
<#AutoGeneratedCodeWarning(); #>

namespace Konamiman.Z80dotNet
{
    public partial class Z80InstructionExecutor
    {
<# foreach (var src in new[] {"BC", "DE", "HL", "SP"}) {
   for(int op=0; op<=1; op++)
   {
       var isAdd = op == 0;
       var opToUse = isAdd ? "Add" : "Sub";
       var instrName = isAdd ? "ADC" : "SBC"; #>
        /// <summary>
        /// The <#=instrName#> HL,<#=src #> instruction
        /// </summary>
        byte <#=instrName#>_HL_<#=src #>()
        {
            FetchFinished();

            var previousHighByte = Registers.H;
            var oldValue = Registers.HL;
            var valueToAdd = Registers.<#=src #>;
            var newValue = oldValue.<#=opToUse#>(valueToAdd).<#=opToUse#>((short)Registers.CF);
            Registers.HL = newValue;
            var newHighByte = Registers.H;

            Registers.SF = newHighByte.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newHighByte & 0x0F) <#=isAdd ? "<" : ">" #> (previousHighByte & 0x0F);
            Registers.CF = (previousHighByte.GetBit(7) == <#=isAdd ? 1 : 0#>) && (newHighByte.GetBit(7) == <#=isAdd ? 0 : 1#>);
            var oldValueMSB = previousHighByte.GetBit(7);
            var newValueMSB = newHighByte.GetBit(7);
<# if(src=="SP") {#>
			var valueToAddHighByte = Registers.SP.GetHighByte();
<#} else {#> 
			var valueToAddHighByte = Registers.<#=src.Substring(0, 1) #>;
<# } #>
<# if (isAdd) { #>
            Registers.PF = (oldValueMSB == valueToAddHighByte.GetBit(7)) && (oldValueMSB != newValueMSB);
<# } else { #>
			var valueToAddMSB = valueToAddHighByte.GetBit(7);
			Registers.PF = (oldValueMSB != valueToAddMSB) && (valueToAddMSB == newValueMSB);
<# } #>
            Registers.NF = <#=op#>;
            SetFlags3and5From(newValue.GetHighByte());

            return 15;
        }

<# }} #>
    }
}
