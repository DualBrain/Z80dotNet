// AUTOGENERATED CODE
//
// Do not make changes directly to this (.cs) file.
// Change "PUSH rr + POP rr               .tt" instead.


namespace Konamiman.Z80dotNet
{
    public partial class Z80InstructionExecutor
    {
        /// <summary>
        /// The PUSH AF instruction.
        /// </summary>
        private byte PUSH_AF()
        {
            FetchFinished();

			var valueToPush = Registers.AF;
			var sp = Registers.SP.Dec();
			ProcessorAgent.WriteToMemory(sp.ToUShort(), valueToPush.GetHighByte());
			sp = sp.Dec();
			ProcessorAgent.WriteToMemory(sp.ToUShort(), valueToPush.GetLowByte());
			Registers.SP = sp;

            return 11;
        }

        /// <summary>
        /// The POP AF instruction.
        /// </summary>
        private byte POP_AF()
        {
            FetchFinished();

			var sp = Registers.SP.ToUShort();
            var newAF = NumberUtils.CreateShort(
                ProcessorAgent.ReadFromMemory(sp),
                ProcessorAgent.ReadFromMemory(sp.Inc()));
            Registers.AF = newAF;

            Registers.SP = Registers.SP.Add(2);

            return 10;
        }

        /// <summary>
        /// The PUSH BC instruction.
        /// </summary>
        private byte PUSH_BC()
        {
            FetchFinished();

			var valueToPush = Registers.BC;
			var sp = Registers.SP.Dec();
			ProcessorAgent.WriteToMemory(sp.ToUShort(), valueToPush.GetHighByte());
			sp = sp.Dec();
			ProcessorAgent.WriteToMemory(sp.ToUShort(), valueToPush.GetLowByte());
			Registers.SP = sp;

            return 11;
        }

        /// <summary>
        /// The POP BC instruction.
        /// </summary>
        private byte POP_BC()
        {
            FetchFinished();

			var sp = Registers.SP.ToUShort();
            var newBC = NumberUtils.CreateShort(
                ProcessorAgent.ReadFromMemory(sp),
                ProcessorAgent.ReadFromMemory(sp.Inc()));
            Registers.BC = newBC;

            Registers.SP = Registers.SP.Add(2);

            return 10;
        }

        /// <summary>
        /// The PUSH DE instruction.
        /// </summary>
        private byte PUSH_DE()
        {
            FetchFinished();

			var valueToPush = Registers.DE;
			var sp = Registers.SP.Dec();
			ProcessorAgent.WriteToMemory(sp.ToUShort(), valueToPush.GetHighByte());
			sp = sp.Dec();
			ProcessorAgent.WriteToMemory(sp.ToUShort(), valueToPush.GetLowByte());
			Registers.SP = sp;

            return 11;
        }

        /// <summary>
        /// The POP DE instruction.
        /// </summary>
        private byte POP_DE()
        {
            FetchFinished();

			var sp = Registers.SP.ToUShort();
            var newDE = NumberUtils.CreateShort(
                ProcessorAgent.ReadFromMemory(sp),
                ProcessorAgent.ReadFromMemory(sp.Inc()));
            Registers.DE = newDE;

            Registers.SP = Registers.SP.Add(2);

            return 10;
        }

        /// <summary>
        /// The PUSH HL instruction.
        /// </summary>
        private byte PUSH_HL()
        {
            FetchFinished();

			var valueToPush = Registers.HL;
			var sp = Registers.SP.Dec();
			ProcessorAgent.WriteToMemory(sp.ToUShort(), valueToPush.GetHighByte());
			sp = sp.Dec();
			ProcessorAgent.WriteToMemory(sp.ToUShort(), valueToPush.GetLowByte());
			Registers.SP = sp;

            return 11;
        }

        /// <summary>
        /// The POP HL instruction.
        /// </summary>
        private byte POP_HL()
        {
            FetchFinished();

			var sp = Registers.SP.ToUShort();
            var newHL = NumberUtils.CreateShort(
                ProcessorAgent.ReadFromMemory(sp),
                ProcessorAgent.ReadFromMemory(sp.Inc()));
            Registers.HL = newHL;

            Registers.SP = Registers.SP.Add(2);

            return 10;
        }

    }
}