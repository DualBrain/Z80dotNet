<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="_Utils.t4"#>
<#@ output extension=".cs" #>
<#AutoGeneratedCodeWarning();#>

namespace Konamiman.Z80dotNet
{
    public partial class Z80InstructionExecutor
    {
<# foreach(var src in new[] {"BC", "DE", "HL", "SP"}) { #>
        /// <summary>
        /// The SBC HL,<#=src#> instruction
        /// </summary>
        byte SBC_HL_<#=src#>()
        {
            FetchFinished();

            var previousHighByte = Registers.H;
            var oldValue = Registers.HL;
            var valueToSub = Registers.<#=src#>;
            var newValue = oldValue.Sub(valueToSub).Sub((short)Registers.CF);
            Registers.HL = newValue;
            var newHighByte = Registers.H;

            Registers.SF = newHighByte.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newHighByte & 0x0F) > (previousHighByte & 0x0F);
            Registers.CF = (previousHighByte.GetBit(7) == 0) && (newHighByte.GetBit(7) == 1);
            var valueToAddMSB = valueToSub.GetHighByte().GetBit(7);
            var oldValueMSB = previousHighByte.GetBit(7);
            var newValueMSB = newHighByte.GetBit(7);
            Registers.PF = (oldValueMSB != valueToAddMSB) && (valueToAddMSB == newValueMSB);

            Registers.NF = 1;
            SetFlags3and5From(newValue.GetHighByte());

            return 15;
        }

<# } #>
    }
}
