<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="_Utils.t4"#>
<#@ output extension=".cs" #>
<#AutoGeneratedCodeWarning();#>

namespace Konamiman.Z80dotNet
{
    public partial class Z80InstructionExecutor
    {
<# foreach(var reg in new[] {"A","B","C","D","E","H","L","aHL","n"}) {
   foreach(var withCarry in new[] {true, false}) {
   for(int i=0; i<=4; i++) {
	    var isAdd = (i==0);
	    var isSub = (i==1);
	    var isCP = (i==2);
        var isCPI = (i==3);
		var isCPD = (i==4);
        var isCompare = (isCP || isCPI || isCPD);
		var isCompareInc = (isCPI || isCPD);
	    if(isCompare && withCarry) continue;
        if(isCompareInc && reg != "A") continue;
        var instrName = 
		   isCPI ? "CPI" :
		   isCPD ? "CPD" :
		   isCP ? "CP" :
		   isAdd && withCarry ? "ADC" :
		   isAdd && !withCarry ? "ADD" :
		   withCarry ? "SBC" : "SUB"; #>
        /// <summary>
<# if(isCompareInc) { #>
		/// The <#=instrName #> instruction.
        /// </summary>
		private byte <#=instrName#>()
<# } else { #>
        /// The <#=instrName #> <#=isAdd || (isSub && withCarry) ? "A," : "" #><#=reg == "aHL" ? "(HL)" : reg #> instruction.
		/// </summary>
		private byte <#=instrName#>_<#=isAdd || withCarry ? "A_" : ""#><#=reg#>()
<# } #>
        {
<# if(reg=="n") { #>
			var valueToAdd = ProcessorAgent.FetchNextOpcode();
<# } #>
            FetchFinished();

            var oldValue = Registers.A;
<# if(reg=="aHL" || isCompareInc) { #>
			var valueToAdd = ProcessorAgent.ReadFromMemory(Registers.HL.ToUShort());
<# } else if(reg!="n") { #>
            var valueToAdd = Registers.<#=reg#>;
<# } #>
			var newValue = (byte)oldValue.<#=isAdd ? "Add" : "Sub"#>(valueToAdd<# if(withCarry) { #> + Registers.CF<# } #>);
<# if(!isCompare) { #>
            Registers.A = newValue;
<# } #>
<# if (isCompareInc) { #>
            Registers.HL = Registers.HL.<#=isCPI ? "Inc" : "Dec"#>();
			Registers.BC = Registers.BC.Dec();
<# } #>

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = (newValue & 0x0F) <#=isAdd ? "<" : ">" #> (oldValue & 0x0F);
<# if (!isCompareInc) { #>
            var oldValueMSB = oldValue.GetBit(7);
            var newValueMSB = newValue.GetBit(7);
            Registers.CF = (oldValueMSB == <#=isAdd ? 1 : 0 #>) && (newValueMSB == <#=isAdd ? 0 : 1 #>);
<# } #>
<# if (isAdd) { #>
            Registers.PF = (oldValueMSB == valueToAdd.GetBit(7)) && (oldValueMSB != newValueMSB);
<# } else if(isCompareInc) { #>
			Registers.PF = (Registers.BC != 0);
<# } else { #>
			var valueToAddMSB = valueToAdd.GetBit(7);
			Registers.PF = (oldValueMSB != valueToAddMSB) && (valueToAddMSB == newValueMSB);
<# } #>

            Registers.NF = <#=isAdd ? 0 : 1#>;
<# if (isCompareInc) { #>
			var valueForFlags3And5 = newValue.Sub(Registers.HF).GetLowByte();
			Registers.Flag3 = valueForFlags3And5.GetBit(3);
			Registers.Flag5 = valueForFlags3And5.GetBit(1);
<# } else { #>
			SetFlags3and5From(newValue);
<# } #>

            return <#=isCompareInc ? 16 : reg=="aHL" || reg=="n" ? 7 : 4#>;
        }

<# }}} #>
    }
}