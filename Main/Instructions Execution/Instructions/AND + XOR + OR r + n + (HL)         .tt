<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="_Utils.t4"#>
<#@ output extension=".cs" #>
<#AutoGeneratedCodeWarning();#>

namespace Konamiman.Z80dotNet
{
    public partial class Z80InstructionExecutor
    {
<# var operators = new Dictionary<string, string> {{"AND","&"}, {"XOR","^"}, {"OR","|"}};
   foreach(var reg in new[] {"A","B","C","D","E","H","L","aHL","n"}) {
   foreach(var instrName in operators.Keys) { #>
        /// <summary>
        /// The <#=instrName#> <#=reg=="aHL" ? "(HL)" : reg#> instruction.
        /// </summary>
        private byte <#=instrName#>_<#=reg#>()
        {
<# if(reg=="n") { #>
			var argument = ProcessorAgent.FetchNextOpcode();
<# } #>
            FetchFinished();

            var oldValue = Registers.A;
<# if(reg=="aHL") { #>
			var argument = ProcessorAgent.ReadFromMemory(Registers.HL.ToUShort());
<# } else if(reg!="n") { #>
            var argument = Registers.<#=reg#>;
<# } #>
			var newValue = (byte)(oldValue <#=operators[instrName]#> argument);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = <#=instrName == "AND" ? 1 : 0#>;
            Registers.PF = Parity[newValue];
            Registers.NF = 0;
			Registers.CF = 0;
            SetFlags3and5From(newValue);

            return <#=reg=="aHL" || reg=="n" ? 7 : 4#>;
        }

<# }} #>
    }
}