// AUTOGENERATED CODE
//
// Do not make changes directly to this (.cs) file.
// Change "ADD rr,rr   .tt" instead.

namespace Konamiman.Z80dotNet
{
    public partial class Z80InstructionExecutor
    {
        /// <summary>
        /// The ADD HL,BC instruction
        /// </summary>
        byte ADD_HL_BC()
        {
            FetchFinished();

            var previousHighByte = Registers.H;
            Registers.HL = Registers.HL.Add(Registers.BC);
            var newHighByte = Registers.H;
            Registers.CF = (previousHighByte.GetBit(7) == 1) && (newHighByte.GetBit(7) == 0);
            Registers.HF = (newHighByte & 0x0F) < (previousHighByte & 0x0F);
            Registers.NF = 0;
            SetFlags3and5From(newHighByte);

            return 11;
        }

        /// <summary>
        /// The ADD HL,DE instruction
        /// </summary>
        byte ADD_HL_DE()
        {
            FetchFinished();

            var previousHighByte = Registers.H;
            Registers.HL = Registers.HL.Add(Registers.DE);
            var newHighByte = Registers.H;
            Registers.CF = (previousHighByte.GetBit(7) == 1) && (newHighByte.GetBit(7) == 0);
            Registers.HF = (newHighByte & 0x0F) < (previousHighByte & 0x0F);
            Registers.NF = 0;
            SetFlags3and5From(newHighByte);

            return 11;
        }

        /// <summary>
        /// The ADD HL,HL instruction
        /// </summary>
        byte ADD_HL_HL()
        {
            FetchFinished();

            var previousHighByte = Registers.H;
            Registers.HL = Registers.HL.Add(Registers.HL);
            var newHighByte = Registers.H;
            Registers.CF = (previousHighByte.GetBit(7) == 1) && (newHighByte.GetBit(7) == 0);
            Registers.HF = (newHighByte & 0x0F) < (previousHighByte & 0x0F);
            Registers.NF = 0;
            SetFlags3and5From(newHighByte);

            return 11;
        }

        /// <summary>
        /// The ADD HL,SP instruction
        /// </summary>
        byte ADD_HL_SP()
        {
            FetchFinished();

            var previousHighByte = Registers.H;
            Registers.HL = Registers.HL.Add(Registers.SP);
            var newHighByte = Registers.H;
            Registers.CF = (previousHighByte.GetBit(7) == 1) && (newHighByte.GetBit(7) == 0);
            Registers.HF = (newHighByte & 0x0F) < (previousHighByte & 0x0F);
            Registers.NF = 0;
            SetFlags3and5From(newHighByte);

            return 11;
        }

        /// <summary>
        /// The ADD IX,BC instruction
        /// </summary>
        byte ADD_IX_BC()
        {
            FetchFinished();

            var previousHighByte = Registers.IXH;
            Registers.IX = Registers.IX.Add(Registers.BC);
            var newHighByte = Registers.IXH;
            Registers.CF = (previousHighByte.GetBit(7) == 1) && (newHighByte.GetBit(7) == 0);
            Registers.HF = (newHighByte & 0x0F) < (previousHighByte & 0x0F);
            Registers.NF = 0;
            SetFlags3and5From(newHighByte);

            return 15;
        }

        /// <summary>
        /// The ADD IX,DE instruction
        /// </summary>
        byte ADD_IX_DE()
        {
            FetchFinished();

            var previousHighByte = Registers.IXH;
            Registers.IX = Registers.IX.Add(Registers.DE);
            var newHighByte = Registers.IXH;
            Registers.CF = (previousHighByte.GetBit(7) == 1) && (newHighByte.GetBit(7) == 0);
            Registers.HF = (newHighByte & 0x0F) < (previousHighByte & 0x0F);
            Registers.NF = 0;
            SetFlags3and5From(newHighByte);

            return 15;
        }

        /// <summary>
        /// The ADD IX,IX instruction
        /// </summary>
        byte ADD_IX_IX()
        {
            FetchFinished();

            var previousHighByte = Registers.IXH;
            Registers.IX = Registers.IX.Add(Registers.IX);
            var newHighByte = Registers.IXH;
            Registers.CF = (previousHighByte.GetBit(7) == 1) && (newHighByte.GetBit(7) == 0);
            Registers.HF = (newHighByte & 0x0F) < (previousHighByte & 0x0F);
            Registers.NF = 0;
            SetFlags3and5From(newHighByte);

            return 15;
        }

        /// <summary>
        /// The ADD IX,SP instruction
        /// </summary>
        byte ADD_IX_SP()
        {
            FetchFinished();

            var previousHighByte = Registers.IXH;
            Registers.IX = Registers.IX.Add(Registers.SP);
            var newHighByte = Registers.IXH;
            Registers.CF = (previousHighByte.GetBit(7) == 1) && (newHighByte.GetBit(7) == 0);
            Registers.HF = (newHighByte & 0x0F) < (previousHighByte & 0x0F);
            Registers.NF = 0;
            SetFlags3and5From(newHighByte);

            return 15;
        }

        /// <summary>
        /// The ADD IY,BC instruction
        /// </summary>
        byte ADD_IY_BC()
        {
            FetchFinished();

            var previousHighByte = Registers.IYH;
            Registers.IY = Registers.IY.Add(Registers.BC);
            var newHighByte = Registers.IYH;
            Registers.CF = (previousHighByte.GetBit(7) == 1) && (newHighByte.GetBit(7) == 0);
            Registers.HF = (newHighByte & 0x0F) < (previousHighByte & 0x0F);
            Registers.NF = 0;
            SetFlags3and5From(newHighByte);

            return 15;
        }

        /// <summary>
        /// The ADD IY,DE instruction
        /// </summary>
        byte ADD_IY_DE()
        {
            FetchFinished();

            var previousHighByte = Registers.IYH;
            Registers.IY = Registers.IY.Add(Registers.DE);
            var newHighByte = Registers.IYH;
            Registers.CF = (previousHighByte.GetBit(7) == 1) && (newHighByte.GetBit(7) == 0);
            Registers.HF = (newHighByte & 0x0F) < (previousHighByte & 0x0F);
            Registers.NF = 0;
            SetFlags3and5From(newHighByte);

            return 15;
        }

        /// <summary>
        /// The ADD IY,IY instruction
        /// </summary>
        byte ADD_IY_IY()
        {
            FetchFinished();

            var previousHighByte = Registers.IYH;
            Registers.IY = Registers.IY.Add(Registers.IY);
            var newHighByte = Registers.IYH;
            Registers.CF = (previousHighByte.GetBit(7) == 1) && (newHighByte.GetBit(7) == 0);
            Registers.HF = (newHighByte & 0x0F) < (previousHighByte & 0x0F);
            Registers.NF = 0;
            SetFlags3and5From(newHighByte);

            return 15;
        }

        /// <summary>
        /// The ADD IY,SP instruction
        /// </summary>
        byte ADD_IY_SP()
        {
            FetchFinished();

            var previousHighByte = Registers.IYH;
            Registers.IY = Registers.IY.Add(Registers.SP);
            var newHighByte = Registers.IYH;
            Registers.CF = (previousHighByte.GetBit(7) == 1) && (newHighByte.GetBit(7) == 0);
            Registers.HF = (newHighByte & 0x0F) < (previousHighByte & 0x0F);
            Registers.NF = 0;
            SetFlags3and5From(newHighByte);

            return 15;
        }

    }
}
