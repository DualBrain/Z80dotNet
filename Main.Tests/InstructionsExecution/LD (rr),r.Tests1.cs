// AUTOGENERATED CODE
//
// Do not make changes directly to this (.cs) file.
// Change LD (rr),r.Tests.tt instead.

using NUnit.Framework;
using Ploeh.AutoFixture;

namespace Konamiman.Z80dotNet.Tests.InstructionsExecution
{
    public partial class Z80InstructionsExecutor
    {
        [Test]
        public void LD_aBC_A_works()
        {
            var address = Fixture.Create<ushort>();
            var oldValue = Fixture.Create<byte>();
            var newValue = Fixture.Create<byte>();
			
            Registers.Main.BC = address.ToShort();
            ProcessorAgent.Memory[address] = oldValue;
            Registers.Main.A = newValue;

            Sut.Execute(0x02);

            Assert.AreEqual(newValue, ProcessorAgent.Memory[address]);
        }

        [Test]
        public void LD_aDE_A_works()
        {
            var address = Fixture.Create<ushort>();
            var oldValue = Fixture.Create<byte>();
            var newValue = Fixture.Create<byte>();
			
            Registers.Main.DE = address.ToShort();
            ProcessorAgent.Memory[address] = oldValue;
            Registers.Main.A = newValue;

            Sut.Execute(0x12);

            Assert.AreEqual(newValue, ProcessorAgent.Memory[address]);
        }

        [Test]
        public void LD_aHL_A_works()
        {
            var address = Fixture.Create<ushort>();
            var oldValue = Fixture.Create<byte>();
            var newValue = Fixture.Create<byte>();
			
            Registers.Main.HL = address.ToShort();
            ProcessorAgent.Memory[address] = oldValue;
            Registers.Main.A = newValue;

            Sut.Execute(0x77);

            Assert.AreEqual(newValue, ProcessorAgent.Memory[address]);
        }

        [Test]
        public void LD_aHL_B_works()
        {
            var address = Fixture.Create<ushort>();
            var oldValue = Fixture.Create<byte>();
            var newValue = Fixture.Create<byte>();
			
            Registers.Main.HL = address.ToShort();
            ProcessorAgent.Memory[address] = oldValue;
            Registers.Main.B = newValue;

            Sut.Execute(0x70);

            Assert.AreEqual(newValue, ProcessorAgent.Memory[address]);
        }

        [Test]
        public void LD_aHL_C_works()
        {
            var address = Fixture.Create<ushort>();
            var oldValue = Fixture.Create<byte>();
            var newValue = Fixture.Create<byte>();
			
            Registers.Main.HL = address.ToShort();
            ProcessorAgent.Memory[address] = oldValue;
            Registers.Main.C = newValue;

            Sut.Execute(0x71);

            Assert.AreEqual(newValue, ProcessorAgent.Memory[address]);
        }

        [Test]
        public void LD_aHL_D_works()
        {
            var address = Fixture.Create<ushort>();
            var oldValue = Fixture.Create<byte>();
            var newValue = Fixture.Create<byte>();
			
            Registers.Main.HL = address.ToShort();
            ProcessorAgent.Memory[address] = oldValue;
            Registers.Main.D = newValue;

            Sut.Execute(0x72);

            Assert.AreEqual(newValue, ProcessorAgent.Memory[address]);
        }

        [Test]
        public void LD_aHL_E_works()
        {
            var address = Fixture.Create<ushort>();
            var oldValue = Fixture.Create<byte>();
            var newValue = Fixture.Create<byte>();
			
            Registers.Main.HL = address.ToShort();
            ProcessorAgent.Memory[address] = oldValue;
            Registers.Main.E = newValue;

            Sut.Execute(0x73);

            Assert.AreEqual(newValue, ProcessorAgent.Memory[address]);
        }

        [Test]
        public void LD_aHL_H_works()
        {
            var address = Fixture.Create<ushort>();
            var oldValue = Fixture.Create<byte>();
            
            Registers.Main.HL = address.ToShort();
            ProcessorAgent.Memory[address] = oldValue;
            

            Sut.Execute(0x74);

            Assert.AreEqual(Registers.Main.H, ProcessorAgent.Memory[address]);
        }

        [Test]
        public void LD_aHL_L_works()
        {
            var address = Fixture.Create<ushort>();
            var oldValue = Fixture.Create<byte>();
            
            Registers.Main.HL = address.ToShort();
            ProcessorAgent.Memory[address] = oldValue;
            

            Sut.Execute(0x75);

            Assert.AreEqual(Registers.Main.L, ProcessorAgent.Memory[address]);
        }

    }
}
