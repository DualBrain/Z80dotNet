<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// AUTOGENERATED CODE
//
// Do not make changes directly to this (.cs) file.
// Change <#=Path.GetFileName(Host.TemplateFile)#> instead.

using NUnit.Framework;
using Ploeh.AutoFixture;

namespace Konamiman.Z80dotNet.Tests.InstructionsExecution
{
    public partial class Z80InstructionsExecutor
    {
<#  var pairs = new[] { "A.BC","A.DE","A.HL","B.HL","C.HL","D.HL","E.HL","H.HL","L.HL" };
	var opcodes = new[] { "02", "12", "77", "70", "71", "72", "73", "74", "75" };
	for(int i=0; i<pairs.Length; i++) { 
        var parts = pairs[i].Split('.');
        var reg = parts[0];
        var pointer = parts[1];
        var opcode = opcodes[i];
		var isHorL = (reg=="H" || reg=="L"); #>
        [Test]
        public void LD_a<#=pointer#>_<#=reg#>_works()
        {
            var address = Fixture.Create<ushort>();
            var oldValue = Fixture.Create<byte>();
            <# if(!isHorL) { #>var newValue = Fixture.Create<byte>();
			<# } #>

            Registers.Main.<#=pointer#> = address.ToShort();
            ProcessorAgent.Memory[address] = oldValue;
            <#= isHorL ? "" : "Registers.Main." + reg + " = newValue;" #>

            Sut.Execute(0x<#=opcode#>);

            Assert.AreEqual(<#= isHorL ? "Registers.Main." + reg : "newValue" #>, ProcessorAgent.Memory[address]);
        }

<# } #>
    }
}
